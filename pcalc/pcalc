#!/usr/bin/env python3

# FIX for https://github.com/prompt-toolkit/python-prompt-toolkit/issues/1023.
import asyncio
import selectors

selector = selectors.SelectSelector()
loop = asyncio.SelectorEventLoop(selector)
asyncio.set_event_loop(loop)

import sys

# Clipboard.
# PyQt4 clipboard support is pretty broken, so we disable it.
class _BlockPyQt4:
    def find_spec(self, fullname, path, target=None):
        if fullname == "PyQt4": raise ImportError("PyQt4 disabled")
        return None
    find_module = find_spec

sys.meta_path.insert(0, _BlockPyQt4())
import pyperclip
sys.meta_path.pop(0)

def paste(): return pyperclip.paste()
def copy(s):
    if isinstance(s, bytes): s = s.decode("utf-8")
    return pyperclip.copy(str(s))

# Simple stopwatch.
import time
def stopwatch():
    start = time.monotonic()
    last = ""
    try:
        while True:
            msg = "{}{:.1f}".format("\b"*len(last), time.monotonic() - start)
            sys.stdout.write(msg)
            sys.stdout.flush()
            last = msg
            time.sleep(0.1)
    except KeyboardInterrupt:
        sys.stdout.write("\b" * len(last))
        sys.stdout.flush()
        return round(time.monotonic() - start, 1)

# 'Shell' stuff.
import os
import subprocess
cd = os.chdir
pwd = os.getcwd
mkdir = os.makedirs
def readfile(fname, mode="r"):
    with open(fname, mode) as f:
        return f.read()
def writefile(fname, data, mode="w"):
    with open(fname, mode) as f:
        f.write(data)




# Builtins.
import builtins
import importlib
reload = importlib.reload

# Itertools.
import itertools
it = itertools
from itertools import *

_no_pad = object()
def chunks(it, n, pad=_no_pad):
    """Split iterable it up into n-length lists. If len(it) is not a
    multiple of n and pad is given, the last chunk is padded with it."""
    r = []
    for e in it:
        r.append(e)
        if len(r) >= n:
            yield r
            r = []
    if r: yield r + (n-len(r))*(pad is not _no_pad)*[pad]

# Collections.
import collections
from collections import Counter, defaultdict, OrderedDict

# Functools.
import functools
from functools import lru_cache, partial, reduce

# Math.pow is shit, import rest.
import math
from math import *
pow = builtins.pow
phi = (1 + 5 ** 0.5) / 2

# Fractions and co.
import fractions
from fractions import Fraction
try:
    from fractions import gcd as _gcd
except ImportError:
    from math import gcd as _gcd
_lcm = lambda a, b: abs(a*b) // _gcd(a, b)
def gcd(*l): return functools.reduce(_gcd, l)
def lcm(*l): return functools.reduce(_lcm, l)

F = Fraction

# Decimal.
import decimal
from decimal import Decimal
D = Decimal

# Random.
import random
from random import randrange, randint, choice, shuffle, random as rand, uniform

# Operators.
import operator
op = operator

# Hashes.
import hashlib

def asbytes(x):
    if isinstance(x, str):
        return x.encode("utf-8")
    return bytes(x)

def md5(x):
    return hashlib.md5(asbytes(x)).hexdigest()

def sha1(x):
    return hashlib.sha1(asbytes(x)).hexdigest()

def sha256(x):
    return hashlib.sha256(asbytes(x)).hexdigest()

def sha512(x):
    return hashlib.sha256(asbytes(x)).hexdigest()

# Better hex and bin.
import binascii

def hex(x):
    if isinstance(x, bytes):
        return "0x" + binascii.hexlify(x).decode("utf-8")
    elif isinstance(x, str):
        return "0x" + binascii.hexlify(x.encode("utf-8")).decode("utf-8")
    else:
        return builtins.hex(x)

def bin(x):
    return builtins.bin(int(hex(x), 16))

def unhex(x):
    if isinstance(x, str):
        x = x.encode("utf-8")

    if x.startswith(b"0x"):
        x = x[2:]

    return binascii.unhexlify(x)

# Modular multiplicative inverse.
def egcd(a, b):
    if a == 0: return (b, 0, 1)
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception("modular multiplicative inverse does not exist")
    else:
        return x % m

# Average.
def avg(*args):
    if len(args) > 1:
        return sum(args) / len(args)
    else:
        l = list(args[0])
        return sum(l) / len(l)

# Product.
def prod(it):
    return reduce(op.mul, it, 1)

# Pretty printing.
from pprint import pprint as pp

# Prime functions.
def primes_below(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

# http://stackoverflow.com/a/30563958/565635
def _wsieve():
    wh11 = [2,4,2,4,6,2,6,4,2,4,6,6, 2,6,4,2,6,4,6,8,4,2,4,2,
            4,8,6,4,6,2,4,6,2,6,6,4, 2,4,6,2,6,4,2,4,2,10,2,10]
    cs = accumulate(chain([11], cycle(wh11)))
    yield next(cs)
    ps = _wsieve()
    p = next(ps)
    psq = p*p
    D = dict(zip(accumulate(chain([0], wh11)), count(0)))   # start from
    mults = {}
    for c in cs:
        if c in mults:
            wheel = mults.pop(c)
        elif c < psq:
            yield c; continue
        else:
            x = [p*d for d in wh11]
            i = D[(p-11) % 210]
            wheel = accumulate(chain([psq+x[i]], cycle(x[i+1:] + x[:i+1])))
            p = next(ps); psq = p*p
        for m in wheel:
            if not m in mults:
                break
        mults[m] = wheel

def primes():
    yield from [2, 3, 5, 7]
    yield from _wsieve()

smallprimeset = set(primes_below(100000))
_smallprimeset = 100000
def isprime(n, precision=7):
    # http://en.wikipedia.org/wiki/Miller-Rabin_primality_test#Algorithm_and_running_time
    if n < 1:
        raise ValueError("Out of bounds, first argument must be > 0")
    elif n <= 3:
        return n >= 2
    elif n % 2 == 0:
        return False
    elif n < _smallprimeset:
        return n in smallprimeset

    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1

    for repeat in range(precision):
        a = random.randrange(2, n - 2)
        x = pow(a, d, n)

        if x == 1 or x == n - 1: continue

        for r in range(s - 1):
            x = pow(x, 2, n)
            if x == 1: return False
            if x == n - 1: break
        else: return False

    return True

# https://comeoncodeon.wordpress.com/2010/09/18/pollard-rho-brent-integer-factorization/
def _pollard_brent(n):
    if n % 2 == 0: return 2
    if n % 3 == 0: return 3

    y, c, m = random.randint(1, n-1), random.randint(1, n-1), random.randint(1, n-1)
    g, r, q = 1, 1, 1
    while g == 1:
        x = y
        for i in range(r):
            y = (pow(y, 2, n) + c) % n

        k = 0
        while k < r and g==1:
            ys = y
            for i in range(min(m, r-k)):
                y = (pow(y, 2, n) + c) % n
                q = q * abs(x-y) % n
            g = gcd(q, n)
            k += m
        r *= 2
    if g == n:
        while True:
            ys = (pow(ys, 2, n) + c) % n
            g = gcd(abs(x - ys), n)
            if g > 1:
                break

    return g

# Might seem low, but 1000*1000 = 1000000, so this will fully factor every composite < 1000000.
smallprimes = primes_below(1000)
def prime_factors(n):
    factors = []

    for checker in smallprimes:
        while n % checker == 0:
            factors.append(checker)
            n //= checker
        if checker > n: break

    if n < 2: return factors

    while n > 1:
        if isprime(n):
            factors.append(n)
            break
        # Trial division did not fully factor, switch to Pollard-Brent.
        factor = _pollard_brent(n)
        factors.extend(prime_factors(factor))  # Factor returned by Pollard-Brent may not be prime, recurse.
        n //= factor

    factors.sort()
    return factors

def factorization(n):
    factors = {}
    for p1 in prime_factors(n):
        try:
            factors[p1] += 1
        except KeyError:
            factors[p1] = 1
    return factors

@lru_cache(None)
def totient(n):
    if n == 0: return 1

    tot = 1
    for p, exp in factorization(n).items():
        tot *= (p - 1) * p**(exp - 1)

    return tot

def binom(n, k):
    assert n >= 0 and k >= 0
    if k > n: return 0
    if n - k < k: k = n - k
    r = 1
    for d in range(1, k+1):
        r = r*n//d
        n -= 1
    return r

def at_least_n_of_m(p, n, m):
    return sum(binom(m, k)* p**k * (1-p)**(m-k) for k in range(n, m+1))

# Data science.
import numpy as np
import pandas as pd
import matplotlib
try:
    matplotlib.use("QtAgg")
except ImportError:
    pass
try:
    import addcopyfighandler
except ImportError:
    pass
import matplotlib.pyplot as plt
import scipy

# Always end up importing these anyways.
import re

if __name__ == "__main__":
    def configure_ptpython(repl):
        repl.vi_mode = True
        repl.confirm_exit = False
        repl.show_line_numbers = False
        repl.enable_open_in_editor  = False
        repl.insert_blank_line_after_output = False
        repl.show_signature = True
        repl.highlight_matching_parenthesis = True
        # repl.use_code_colorscheme("solarizeddark")

    from ptpython.repl import embed
    embed(globals(), locals(), configure_ptpython)
